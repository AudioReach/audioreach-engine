/* =========================================================================
 * Copyright (c) Qualcomm Innovation Center, Inc. All Rights Reserved.
 * SPDX-License-Identifier: BSD-3-Clause-Clear
   ========================================================================== */

#include "capi_bassboost_utils.h"

#define NUM_GENERAL_FREQUENCIES 12

static const uint32_t freq_array[] = { 8000,  11025, 16000, 22050, 32000,  44100,
                                       48000, 64000, 88200, 96000, 176400, 192000 };

static const uint32_t bassboost_kpps_table_enable[2][BASS_BOOST_MAX_CHANNELS][NUM_GENERAL_FREQUENCIES] =
   { { { 478, 637, 896, 1213, 1786, 2422, 2627, 3519, 4846, 5258, 9730, 10574 },
       { 955, 1279, 1808, 2455, 3610, 4907, 5324, 7129, 9824, 10662, 19731, 21437 },
       { 1392, 1868, 2646, 3594, 5285, 7190, 7801, 10453, 14415, 15648, 29080, 31610 },
       { 1799, 2409, 3404, 4621, 6796, 9239, 10024, 13421, 18490, 20064, 37082, 40265 },
       { 2233, 2995, 4235, 5753, 8461, 11509, 12487, 16718, 23042, 25007, 46256, 50226 },
       { 2655, 3560, 5038, 6846, 10068, 13694, 14859, 19901, 27432, 29773, 55122, 59884 },
       { 3074, 4124, 5833, 7926, 11657, 15858, 17205, 23038, 31757, 34465, 63769, 69248 },
       { 3477, 4667, 6601, 8973, 13195, 17953, 19476, 26085, 35965, 39028, 72270, 78496 } },
     { { 484, 650, 927, 1267, 1863, 2533, 2749, 3679, 5062, 5495, 10129, 10999 },
       { 984, 1328, 1900, 2605, 3825, 5214, 5662, 7570, 10425, 11322, 20866, 22667 },
       { 1452, 1971, 2844, 3876, 5678, 7744, 8411, 11248, 15491, 16825, 31042, 33732 },
       { 1844, 2487, 3550, 4851, 7145, 9763, 10601, 14174, 19519, 21197, 39072, 42434 },
       { 2296, 3104, 4437, 6078, 8953, 12215, 13265, 17732, 24428, 26530, 48910, 53113 },
       { 2739, 3706, 5310, 7291, 10706, 14604, 15860, 21207, 29210, 31725, 58514, 63554 },
       { 3168, 4281, 6127, 8395, 12364, 16864, 18314, 24488, 33726, 36629, 67528, 73359 },
       { 3593, 4862, 6968, 9567, 14051, 19167, 20815, 27834, 38337, 41640, 76794, 83424 } } };

static const uint32_t bassboost_kpps_table_disable[2][BASS_BOOST_MAX_CHANNELS][NUM_GENERAL_FREQUENCIES] =
   { { { 23, 24, 25, 31, 35, 37, 43, 52, 55, 67, 85, 91 },
       { 31, 34, 37, 48, 58, 61, 72, 90, 96, 120, 156, 168 },
       { 40, 44, 49, 67, 80, 85, 102, 130, 139, 174, 229, 247 },
       { 49, 54, 61, 84, 103, 108, 132, 169, 180, 228, 301, 324 },
       { 56, 63, 71, 102, 125, 132, 162, 207, 221, 281, 372, 402 },
       { 66, 73, 84, 120, 148, 156, 191, 246, 264, 335, 444, 480 },
       { 75, 83, 95, 137, 170, 179, 221, 285, 305, 389, 516, 557 },
       { 83, 93, 107, 155, 192, 203, 251, 324, 347, 443, 587, 635 } },
     { { 23, 26, 31, 47, 59, 63, 79, 103, 111, 143, 191, 207 },
       { 33, 39, 49, 81, 105, 113, 145, 193, 209, 273, 370, 401 },
       { 42, 52, 66, 114, 151, 162, 210, 283, 306, 402, 548, 594 },
       { 52, 64, 84, 148, 196, 212, 276, 373, 404, 532, 725, 788 },
       { 61, 77, 101, 181, 242, 261, 341, 462, 501, 661, 903, 981 },
       { 71, 89, 119, 215, 287, 311, 406, 552, 599, 790, 1081, 1175 },
       { 80, 101, 136, 248, 333, 360, 472, 641, 696, 920, 1259, 1368 },
       { 89, 114, 153, 281, 378, 409, 537, 731, 793, 1049, 1437, 1561 } }

   };

static inline int32_t get_frequency_index(uint32_t freq)
{
   int16 i = 0;
   for (i = 0; i < NUM_GENERAL_FREQUENCIES; i++)
   {
      if (freq == freq_array[i])
         return i;
   }
   return -1;
}

static inline int32_t get_channel_index(uint32_t num_ch)
{
   return (num_ch - 1);
}

uint32_t capi_bassboost_get_kpps(capi_bassboost_t *me_ptr)
{
   const uint32_t numChan         = me_ptr->input_media_fmt[0].format.num_channels;
   const uint32_t Freq            = me_ptr->input_media_fmt[0].format.sampling_rate;
   uint32_t       bits_per_sample = me_ptr->input_media_fmt[0].format.bits_per_sample;

   int32_t  ch_index   = get_channel_index(numChan);
   int32_t  freq_index = get_frequency_index(Freq);
   int32_t  bps_index  = (bits_per_sample == 16) ? 0 : 1;
   uint32_t kpps       = 0;

   if ((freq_index >= 0) && (ch_index >= 0))
   {
      if ((me_ptr->lib_config.enable) && (me_ptr->lib_instance.mem_ptr != NULL))
      {
         kpps = bassboost_kpps_table_enable[bps_index][ch_index][freq_index];
      }
      else
      {
         kpps = bassboost_kpps_table_disable[bps_index][ch_index][freq_index];
      }
   }

   return kpps;
}
